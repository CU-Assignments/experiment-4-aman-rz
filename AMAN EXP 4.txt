Easy Level:
Write a Java program to implement an ArrayList that stores employee details (ID, Name, and Salary). Allow users to add, update, remove, and search employees.


import java.util.ArrayList;
import java.util.Scanner;

class Employee {
    private int id;
    private String name;
    private double salary;

    public Employee(int id, String name, double salary) {
        this.id = id;
        this.name = name;
        this.salary = salary;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public double getSalary() {
        return salary;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Salary: " + salary;
    }
}

public class EmployeeManagement {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArrayList<Employee> employees = new ArrayList<>();

        while (true) {
            System.out.println("\nMenu:");
            System.out.println("1. Add Employee");
            System.out.println("2. Update Employee");
            System.out.println("3. Remove Employee");
            System.out.println("4. Search Employee");
            System.out.println("5. Display All Employees");
            System.out.println("6. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter employee ID: ");
                    int id = scanner.nextInt();
                    scanner.nextLine();  // Consume newline
                    System.out.print("Enter employee name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter employee salary: ");
                    double salary = scanner.nextDouble();
                    employees.add(new Employee(id, name, salary));
                    System.out.println("Employee added.");
                    break;

                case 2:
                    System.out.print("Enter employee ID to update: ");
                    int updateId = scanner.nextInt();
                    scanner.nextLine();  // Consume newline
                    Employee employeeToUpdate = null;
                    for (Employee e : employees) {
                        if (e.getId() == updateId) {
                            employeeToUpdate = e;
                            break;
                        }
                    }
                    if (employeeToUpdate != null) {
                        System.out.print("Enter new name: ");
                        String newName = scanner.nextLine();
                        System.out.print("Enter new salary: ");
                        double newSalary = scanner.nextDouble();
                        employeeToUpdate.setName(newName);
                        employeeToUpdate.setSalary(newSalary);
                        System.out.println("Employee updated.");
                    } else {
                        System.out.println("Employee not found.");
                    }
                    break;

                case 3:
                    System.out.print("Enter employee ID to remove: ");
                    int removeId = scanner.nextInt();
                    Employee employeeToRemove = null;
                    for (Employee e : employees) {
                        if (e.getId() == removeId) {
                            employeeToRemove = e;
                            break;
                        }
                    }
                    if (employeeToRemove != null) {
                        employees.remove(employeeToRemove);
                        System.out.println("Employee removed.");
                    } else {
                        System.out.println("Employee not found.");
                    }
                    break;

                case 4:
                    System.out.print("Enter employee ID to search: ");
                    int searchId = scanner.nextInt();
                    Employee employeeToSearch = null;
                    for (Employee e : employees) {
                        if (e.getId() == searchId) {
                            employeeToSearch = e;
                            break;
                        }
                    }
                    if (employeeToSearch != null) {
                        System.out.println("Employee found: " + employeeToSearch);
                    } else {
                        System.out.println("Employee not found.");
                    }
                    break;

                case 5:
                    if (employees.isEmpty()) {
                        System.out.println("No employees found.");
                    } else {
                        System.out.println("All Employees:");
                        for (Employee e : employees) {
                            System.out.println(e);
                        }
                    }
                    break;

                case 6:
                    System.out.println("Exiting...");
                    return;

                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }
}

Medium Level:
 Create a program to collect and store all the cards to assist the users in finding all the cards in a given symbol using Collection interface.

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Card {
    private String rank;
    private String suit;

    public Card(String rank, String suit) {
        this.rank = rank;
        this.suit = suit;
    }

    public String getRank() {
        return rank;
    }

    public String getSuit() {
        return suit;
    }

    @Override
    public String toString() {
        return rank + " of " + suit;
    }
}

class Deck {
    private List<Card> cards;

    public Deck() {
        cards = new ArrayList<>();
        String[] suits = {"Hearts", "Spades", "Diamonds", "Clubs"};
        String[] ranks = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King", "Ace"};

        for (String suit : suits) {
            for (String rank : ranks) {
                cards.add(new Card(rank, suit));
            }
        }
    }

    public List<Card> getAllCards() {
        return cards;
    }

    public List<Card> getCardsBySuit(String suit) {
        List<Card> result = new ArrayList<>();
        for (Card card : cards) {
            if (card.getSuit().equalsIgnoreCase(suit)) {
                result.add(card);
            }
        }
        return result;
    }
}

public class CardCollection {
    public static void main(String[] args) {
        Deck deck = new Deck();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nMenu:");
            System.out.println("1. Display All Cards");
            System.out.println("2. Find Cards by Suit");
            System.out.println("3. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:
                    System.out.println("All Cards in the Deck:");
                    for (Card card : deck.getAllCards()) {
                        System.out.println(card);
                    }
                    break;

                case 2:
                    System.out.print("Enter the suit (Hearts, Spades, Diamonds, Clubs): ");
                    String suit = scanner.nextLine();
                    List<Card> cardsBySuit = deck.getCardsBySuit(suit);

                    if (cardsBySuit.isEmpty()) {
                        System.out.println("No cards found with the suit " + suit);
                    } else {
                        System.out.println("Cards of " + suit + ":");
                        for (Card card : cardsBySuit) {
                            System.out.println(card);
                        }
                    }
                    break;

                case 3:
                    System.out.println("Exiting...");
                    return;

                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }
}


Hard Level:
Develop a ticket booking system with synchronized threads to ensure no double booking of seats. Use thread priorities to simulate VIP bookings being processed first.

class TicketBookingSystem {
    private int availableSeats;

    public TicketBookingSystem(int availableSeats) {
        this.availableSeats = availableSeats;
    }

    public synchronized void bookSeat(String customerName, int priority) {
        if (availableSeats > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            availableSeats--;
            System.out.println(customerName + " booked a seat. Remaining seats: " + availableSeats);
        } else {
            System.out.println("Sorry " + customerName + ", no seats available.");
        }
    }

    public int getAvailableSeats() {
        return availableSeats;
    }
}

class BookingThread extends Thread {
    private TicketBookingSystem ticketBookingSystem;
    private String customerName;
    private int priority;

    public BookingThread(TicketBookingSystem ticketBookingSystem, String customerName, int priority) {
        this.ticketBookingSystem = ticketBookingSystem;
        this.customerName = customerName;
        this.priority = priority;
    }

    @Override
    public void run() {
        setPriority(priority);
        ticketBookingSystem.bookSeat(customerName, priority);
    }
}

public class TicketBookingApp {
    public static void main(String[] args) {
        TicketBookingSystem ticketBookingSystem = new TicketBookingSystem(5);

        BookingThread vipCustomer1 = new BookingThread(ticketBookingSystem, "VIP Customer 1", Thread.MAX_PRIORITY);
        BookingThread regularCustomer1 = new BookingThread(ticketBookingSystem, "Regular Customer 1", Thread.NORM_PRIORITY);
        BookingThread vipCustomer2 = new BookingThread(ticketBookingSystem, "VIP Customer 2", Thread.MAX_PRIORITY);
        BookingThread regularCustomer2 = new BookingThread(ticketBookingSystem, "Regular Customer 2", Thread.NORM_PRIORITY);
        BookingThread regularCustomer3 = new BookingThread(ticketBookingSystem, "Regular Customer 3", Thread.NORM_PRIORITY);
        BookingThread vipCustomer3 = new BookingThread(ticketBookingSystem, "VIP Customer 3", Thread.MAX_PRIORITY);

        vipCustomer1.start();
        regularCustomer1.start();
        vipCustomer2.start();
        regularCustomer2.start();
        regularCustomer3.start();
        vipCustomer3.start();
    }
}

